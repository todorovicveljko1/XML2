// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: proto/rating.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingService_HostRating_FullMethodName          = "/RatingService/HostRating"
	RatingService_AccommodationRating_FullMethodName = "/RatingService/AccommodationRating"
	RatingService_Rate_FullMethodName                = "/RatingService/Rate"
	RatingService_RemoveRating_FullMethodName        = "/RatingService/RemoveRating"
	RatingService_GetMyRatings_FullMethodName        = "/RatingService/GetMyRatings"
)

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	// Host rating
	HostRating(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingResponse, error)
	// Accommodation rating
	AccommodationRating(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingResponse, error)
	// Rating requests
	Rate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
	RemoveRating(ctx context.Context, in *RemoveRatingRequest, opts ...grpc.CallOption) (*RemoveRatingResponse, error)
	GetMyRatings(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingList, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) HostRating(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, RatingService_HostRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) AccommodationRating(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingResponse, error) {
	out := new(RatingResponse)
	err := c.cc.Invoke(ctx, RatingService_AccommodationRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) Rate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, RatingService_Rate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) RemoveRating(ctx context.Context, in *RemoveRatingRequest, opts ...grpc.CallOption) (*RemoveRatingResponse, error) {
	out := new(RemoveRatingResponse)
	err := c.cc.Invoke(ctx, RatingService_RemoveRating_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceClient) GetMyRatings(ctx context.Context, in *RatingIdRequest, opts ...grpc.CallOption) (*RatingList, error) {
	out := new(RatingList)
	err := c.cc.Invoke(ctx, RatingService_GetMyRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	// Host rating
	HostRating(context.Context, *RatingIdRequest) (*RatingResponse, error)
	// Accommodation rating
	AccommodationRating(context.Context, *RatingIdRequest) (*RatingResponse, error)
	// Rating requests
	Rate(context.Context, *RateRequest) (*RateResponse, error)
	RemoveRating(context.Context, *RemoveRatingRequest) (*RemoveRatingResponse, error)
	GetMyRatings(context.Context, *RatingIdRequest) (*RatingList, error)
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) HostRating(context.Context, *RatingIdRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostRating not implemented")
}
func (UnimplementedRatingServiceServer) AccommodationRating(context.Context, *RatingIdRequest) (*RatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccommodationRating not implemented")
}
func (UnimplementedRatingServiceServer) Rate(context.Context, *RateRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rate not implemented")
}
func (UnimplementedRatingServiceServer) RemoveRating(context.Context, *RemoveRatingRequest) (*RemoveRatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRating not implemented")
}
func (UnimplementedRatingServiceServer) GetMyRatings(context.Context, *RatingIdRequest) (*RatingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyRatings not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_HostRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).HostRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_HostRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).HostRating(ctx, req.(*RatingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_AccommodationRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).AccommodationRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_AccommodationRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).AccommodationRating(ctx, req.(*RatingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_Rate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).Rate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_Rate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).Rate(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_RemoveRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).RemoveRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_RemoveRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).RemoveRating(ctx, req.(*RemoveRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingService_GetMyRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RatingIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceServer).GetMyRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingService_GetMyRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceServer).GetMyRatings(ctx, req.(*RatingIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostRating",
			Handler:    _RatingService_HostRating_Handler,
		},
		{
			MethodName: "AccommodationRating",
			Handler:    _RatingService_AccommodationRating_Handler,
		},
		{
			MethodName: "Rate",
			Handler:    _RatingService_Rate_Handler,
		},
		{
			MethodName: "RemoveRating",
			Handler:    _RatingService_RemoveRating_Handler,
		},
		{
			MethodName: "GetMyRatings",
			Handler:    _RatingService_GetMyRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rating.proto",
}

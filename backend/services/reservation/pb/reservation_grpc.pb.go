// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.3
// source: proto/reservation.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReservationService_GetReservation_FullMethodName                  = "/ReservationService/GetReservation"
	ReservationService_CreateReservation_FullMethodName               = "/ReservationService/CreateReservation"
	ReservationService_ApproveReservation_FullMethodName              = "/ReservationService/ApproveReservation"
	ReservationService_RejectReservation_FullMethodName               = "/ReservationService/RejectReservation"
	ReservationService_CancelReservation_FullMethodName               = "/ReservationService/CancelReservation"
	ReservationService_GetReservationsForGuest_FullMethodName         = "/ReservationService/GetReservationsForGuest"
	ReservationService_GetReservationsForAccommodation_FullMethodName = "/ReservationService/GetReservationsForAccommodation"
	ReservationService_FilterOutTakenAccommodations_FullMethodName    = "/ReservationService/FilterOutTakenAccommodations"
)

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error)
	CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*Reservation, error)
	ApproveReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error)
	RejectReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error)
	CancelReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error)
	GetReservationsForGuest(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReservationList, error)
	GetReservationsForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReservationList, error)
	FilterOutTakenAccommodations(ctx context.Context, in *FilterTakenAccommodationsRequest, opts ...grpc.CallOption) (*IdList, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*Reservation, error) {
	out := new(Reservation)
	err := c.cc.Invoke(ctx, ReservationService_GetReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*Reservation, error) {
	out := new(Reservation)
	err := c.cc.Invoke(ctx, ReservationService_CreateReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) ApproveReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error) {
	out := new(ReservationStatus)
	err := c.cc.Invoke(ctx, ReservationService_ApproveReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) RejectReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error) {
	out := new(ReservationStatus)
	err := c.cc.Invoke(ctx, ReservationService_RejectReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CancelReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationStatus, error) {
	out := new(ReservationStatus)
	err := c.cc.Invoke(ctx, ReservationService_CancelReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetReservationsForGuest(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReservationList, error) {
	out := new(ReservationList)
	err := c.cc.Invoke(ctx, ReservationService_GetReservationsForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetReservationsForAccommodation(ctx context.Context, in *IdRequest, opts ...grpc.CallOption) (*ReservationList, error) {
	out := new(ReservationList)
	err := c.cc.Invoke(ctx, ReservationService_GetReservationsForAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) FilterOutTakenAccommodations(ctx context.Context, in *FilterTakenAccommodationsRequest, opts ...grpc.CallOption) (*IdList, error) {
	out := new(IdList)
	err := c.cc.Invoke(ctx, ReservationService_FilterOutTakenAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations must embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	GetReservation(context.Context, *GetReservationRequest) (*Reservation, error)
	CreateReservation(context.Context, *CreateReservationRequest) (*Reservation, error)
	ApproveReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error)
	RejectReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error)
	CancelReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error)
	GetReservationsForGuest(context.Context, *IdRequest) (*ReservationList, error)
	GetReservationsForAccommodation(context.Context, *IdRequest) (*ReservationList, error)
	FilterOutTakenAccommodations(context.Context, *FilterTakenAccommodationsRequest) (*IdList, error)
	mustEmbedUnimplementedReservationServiceServer()
}

// UnimplementedReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) GetReservation(context.Context, *GetReservationRequest) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}
func (UnimplementedReservationServiceServer) CreateReservation(context.Context, *CreateReservationRequest) (*Reservation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedReservationServiceServer) ApproveReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveReservation not implemented")
}
func (UnimplementedReservationServiceServer) RejectReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectReservation not implemented")
}
func (UnimplementedReservationServiceServer) CancelReservation(context.Context, *GetReservationRequest) (*ReservationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedReservationServiceServer) GetReservationsForGuest(context.Context, *IdRequest) (*ReservationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationsForGuest not implemented")
}
func (UnimplementedReservationServiceServer) GetReservationsForAccommodation(context.Context, *IdRequest) (*ReservationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationsForAccommodation not implemented")
}
func (UnimplementedReservationServiceServer) FilterOutTakenAccommodations(context.Context, *FilterTakenAccommodationsRequest) (*IdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterOutTakenAccommodations not implemented")
}
func (UnimplementedReservationServiceServer) mustEmbedUnimplementedReservationServiceServer() {}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CreateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CreateReservation(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_ApproveReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).ApproveReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_ApproveReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).ApproveReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_RejectReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).RejectReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_RejectReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).RejectReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CancelReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetReservationsForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetReservationsForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetReservationsForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetReservationsForGuest(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetReservationsForAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetReservationsForAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetReservationsForAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetReservationsForAccommodation(ctx, req.(*IdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_FilterOutTakenAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTakenAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).FilterOutTakenAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_FilterOutTakenAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).FilterOutTakenAccommodations(ctx, req.(*FilterTakenAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReservation",
			Handler:    _ReservationService_GetReservation_Handler,
		},
		{
			MethodName: "CreateReservation",
			Handler:    _ReservationService_CreateReservation_Handler,
		},
		{
			MethodName: "ApproveReservation",
			Handler:    _ReservationService_ApproveReservation_Handler,
		},
		{
			MethodName: "RejectReservation",
			Handler:    _ReservationService_RejectReservation_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _ReservationService_CancelReservation_Handler,
		},
		{
			MethodName: "GetReservationsForGuest",
			Handler:    _ReservationService_GetReservationsForGuest_Handler,
		},
		{
			MethodName: "GetReservationsForAccommodation",
			Handler:    _ReservationService_GetReservationsForAccommodation_Handler,
		},
		{
			MethodName: "FilterOutTakenAccommodations",
			Handler:    _ReservationService_FilterOutTakenAccommodations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/reservation.proto",
}
